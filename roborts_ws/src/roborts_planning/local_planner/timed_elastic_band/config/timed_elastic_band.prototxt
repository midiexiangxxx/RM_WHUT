opt_frame {
    odom_frame: "odom"
    map_frame: "map"
}

trajectory_opt {
    teb_autosize: True
    dt_ref: 0.15                                       #dt_ref: #期望的轨迹时间分辨率
    dt_hysteresis: 0.01                                #dt_hysteresis:  #根据当前时间分辨率自动调整大小的滞后现象，通常约为。建议使用dt ref的10%。
    global_plan_overwrite_orientation: true            #global_plan_overwrite_orientation: True覆盖由全局规划器提供的局部子目标的方向
    allow_init_with_backwards_motion: false 
    global_plan_viapoint_sep: 1.5                      #global_plan_viapoint_sep(double, default: -0.1 (disabled)) 如果为正值，则通过点（via-points ）从
                                                       #全局计划（路径跟踪模式）展开，该值确定参考路径的分辨率（沿着全局计划的每两个连续通过
                                                       #之间的最小间隔，可以参考参数weight_viapoint来调整大小
    via_points_ordered: False
    max_global_plan_lookahead_dist: 2.0                #max_global_plan_lookahead_dist 指定考虑优化的全局计划子集的最大长度
    exact_arc_length: False
    force_reinit_new_goal_dist: 0.8                    #force_reinit_new_goal_dist (double, default: 1.0) 重新引导轨迹如果先前的目标是更新分离超过指定值米(跳过hot-starting)
    feasibility_check_no_poses: 5                      #每个采样间隔的姿态可行性分析数，default：4
    publish_feedback: False                            #publish_feedback (bool, default: false) 发布包含完整轨迹和动态障碍的列表的规划器反馈
    min_samples: 3  
    max_samples: 200
}

kinematics_opt {
    max_vel_x: 2.5                                       #max_vel_x表示机器人最大线速度，单位是m/s。
    max_vel_x_backwards: 0.2                             #最大后退速度 
    max_vel_y: 2.5                                       #y轴速度，差速轮没有，麦姆轮可以有
    max_vel_theta: 2.5                                   #最大角速度，单位rad/s。 
    acc_lim_x: 2.6                                       #x方向的最大线速度的加速度
    acc_lim_y: 2.6                                       #y方向的最大线速度的加速度
    acc_lim_theta: 2.6                                   #角速度加速度限值
    min_turning_radius: 0                                #最小转弯半径                   
    wheelbase: 0
    cmd_angle_instead_rotvel: false                      #是否允许原地转
}

tolerance_opt {
    xy_goal_tolerance: 0.1                               #xy_goal_tolerance: 目标位置的允许距离误差
    yaw_goal_tolerance: 0.1                              #yaw_goal_tolerance:目标位置的允许角度误差
    free_goal_vel: False                                 #free_goal_vel: False #去除目标速度的约束
} 

obstacles_opt {
    min_obstacle_dist: 0.32 #0.8                        #min_obstacle_dist:  与障碍的最小期望距离,注意，teb_local_planner本身不考虑膨胀半径
    inflation_dist: 0                                   #inflation_dist (double, default: 0.6) 障碍物周围缓冲区(应大于min_obstacle_dist才能生效)
    include_costmap_obstacles: True                     #include_costmap_obstacles: True #应否考虑到局部costmap的障碍
    costmap_obstacles_behind_robot_dist: 0.1            #costmap_obstacles_behind_robot_dist: 考虑后面n米内的障碍物
    obstacle_poses_affected: 30                         #obstacle_poses_affected: 为了保持距离，每个障碍物位置都与轨道上最近的位置相连。
    legacy_obstacle_association: False                  #legacy_obstacle_association (bool, default: false) 切换到旧的的策略
    obstacle_association_cutoff_factor: 5.0             #obstacle_association_cutoff_factor (double, default: 5) 只有在参数legacy为false时才使用此2参数
    obstacle_association_force_inclusion_factor: 1.5    #obstacle_association_force_inclusion_factor (double, default: 1.5) n * min_obstacle_dist的半径范围内强制考虑障碍
}

robot_type {
    type: POINT
    robot_vertices {
        x: 0.3
        y: 0.225
    }
    robot_vertices {
        x: -0.3
        y: 0.225
    }
    robot_vertices {
        x: -0.3
        y: -0.225
    }
    robot_vertices {
        x: 0.3
        y: -0.225
    }
}

optimize_info {
    no_inner_iterations: 5                               #no_inner_iterations: 5 #在每个外循环迭代中调用的实际求解器迭代次数
    no_outer_iterations: 4                               #no_outer_iterations: 4 #在每个外循环迭代中调用的实际求解器迭代次数
    optimization_activate: True                      
    optimization_verbose: False
    penalty_epsilon: 0.1                                 #penalty_epsilon: 为硬约束近似的惩罚函数添加一个小的安全范围
    weight_max_vel_x: 1                                  #weight_max_vel_x:  满足最大允许平移速度的优化权重
    weight_max_vel_y: 1
    weight_max_vel_theta: 3                              #weight_max_vel_theta: 满足最大允许平移速度的优化权重
    weight_acc_lim_x: 1                                  #weight_acc_lim_x: 满足最大允许平移加速度的优化权重。
    weight_acc_lim_y: 1                                   
    weight_acc_lim_theta: 3                              #weight_acc_lim_theta: 满足最大允许角加速度的优化权重
    weight_kinematics_nh: 1                               #weight_kinematics_nh: 面向non-holonomic robots的运动学约束的权重。现在可以降低该权重，1就可以
    weight_kinematics_forward_drive: 1                   # weight_kinematics_forward_drive: 强制机器人仅选择正向（正的平移速度）的优化权重。
    weight_kinematics_turning_radius: 0.0                #weight_kinematics_turning_radius: 采用最小转向半径的优化权重
    weight_optimaltime: 1                                 #weight_optimaltime:根据转换/执行时间对轨迹进行收缩的优化权重。
    weight_obstacle: 70                                   #weight_obstacle: 保持与障碍物的最小距离的优化权重 default: 50.0
    weight_inflation: 0.5                                 #weight_inflation (double, default: 0.1) #膨胀半径权重
    weight_dynamic_obstacle: 10                          #weight_dynamic_obstacle: 10 # not in use yet
    weight_viapoint: 10
    weight_adapt_factor: 2.0                             #weight_adapt_factor: 2 #迭代地增加某些权重
    weight_prefer_rotdir: 0
}

