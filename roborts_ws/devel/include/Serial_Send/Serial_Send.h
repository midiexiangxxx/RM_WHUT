// Generated by gencpp from file Serial_Send/Serial_Send.msg
// DO NOT EDIT!


#ifndef SERIAL_SEND_MESSAGE_SERIAL_SEND_H
#define SERIAL_SEND_MESSAGE_SERIAL_SEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Serial_Send
{
template <class ContainerAllocator>
struct Serial_Send_
{
  typedef Serial_Send_<ContainerAllocator> Type;

  Serial_Send_()
    : gimbal_x(0.0)
    , gimbal_y(0.0)
    , gimbal_z(0.0)
    , vx_set(0.0)
    , vy_set(0.0)
    , wz_set(0.0)  {
    }
  Serial_Send_(const ContainerAllocator& _alloc)
    : gimbal_x(0.0)
    , gimbal_y(0.0)
    , gimbal_z(0.0)
    , vx_set(0.0)
    , vy_set(0.0)
    , wz_set(0.0)  {
  (void)_alloc;
    }



   typedef float _gimbal_x_type;
  _gimbal_x_type gimbal_x;

   typedef float _gimbal_y_type;
  _gimbal_y_type gimbal_y;

   typedef float _gimbal_z_type;
  _gimbal_z_type gimbal_z;

   typedef float _vx_set_type;
  _vx_set_type vx_set;

   typedef float _vy_set_type;
  _vy_set_type vy_set;

   typedef float _wz_set_type;
  _wz_set_type wz_set;





  typedef boost::shared_ptr< ::Serial_Send::Serial_Send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Serial_Send::Serial_Send_<ContainerAllocator> const> ConstPtr;

}; // struct Serial_Send_

typedef ::Serial_Send::Serial_Send_<std::allocator<void> > Serial_Send;

typedef boost::shared_ptr< ::Serial_Send::Serial_Send > Serial_SendPtr;
typedef boost::shared_ptr< ::Serial_Send::Serial_Send const> Serial_SendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Serial_Send::Serial_Send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Serial_Send::Serial_Send_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Serial_Send::Serial_Send_<ContainerAllocator1> & lhs, const ::Serial_Send::Serial_Send_<ContainerAllocator2> & rhs)
{
  return lhs.gimbal_x == rhs.gimbal_x &&
    lhs.gimbal_y == rhs.gimbal_y &&
    lhs.gimbal_z == rhs.gimbal_z &&
    lhs.vx_set == rhs.vx_set &&
    lhs.vy_set == rhs.vy_set &&
    lhs.wz_set == rhs.wz_set;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Serial_Send::Serial_Send_<ContainerAllocator1> & lhs, const ::Serial_Send::Serial_Send_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Serial_Send

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::Serial_Send::Serial_Send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Serial_Send::Serial_Send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Serial_Send::Serial_Send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Serial_Send::Serial_Send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Serial_Send::Serial_Send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Serial_Send::Serial_Send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Serial_Send::Serial_Send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33a15562caea82466375017bafdca201";
  }

  static const char* value(const ::Serial_Send::Serial_Send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33a15562caea8246ULL;
  static const uint64_t static_value2 = 0x6375017bafdca201ULL;
};

template<class ContainerAllocator>
struct DataType< ::Serial_Send::Serial_Send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Serial_Send/Serial_Send";
  }

  static const char* value(const ::Serial_Send::Serial_Send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Serial_Send::Serial_Send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 gimbal_x\n"
"float32 gimbal_y\n"
"float32 gimbal_z\n"
"float32 vx_set\n"
"float32 vy_set\n"
"float32 wz_set\n"
;
  }

  static const char* value(const ::Serial_Send::Serial_Send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Serial_Send::Serial_Send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gimbal_x);
      stream.next(m.gimbal_y);
      stream.next(m.gimbal_z);
      stream.next(m.vx_set);
      stream.next(m.vy_set);
      stream.next(m.wz_set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Serial_Send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Serial_Send::Serial_Send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Serial_Send::Serial_Send_<ContainerAllocator>& v)
  {
    s << indent << "gimbal_x: ";
    Printer<float>::stream(s, indent + "  ", v.gimbal_x);
    s << indent << "gimbal_y: ";
    Printer<float>::stream(s, indent + "  ", v.gimbal_y);
    s << indent << "gimbal_z: ";
    Printer<float>::stream(s, indent + "  ", v.gimbal_z);
    s << indent << "vx_set: ";
    Printer<float>::stream(s, indent + "  ", v.vx_set);
    s << indent << "vy_set: ";
    Printer<float>::stream(s, indent + "  ", v.vy_set);
    s << indent << "wz_set: ";
    Printer<float>::stream(s, indent + "  ", v.wz_set);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_SEND_MESSAGE_SERIAL_SEND_H
