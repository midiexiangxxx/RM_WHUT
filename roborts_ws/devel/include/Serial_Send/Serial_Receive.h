// Generated by gencpp from file Serial_Send/Serial_Receive.msg
// DO NOT EDIT!


#ifndef SERIAL_SEND_MESSAGE_SERIAL_RECEIVE_H
#define SERIAL_SEND_MESSAGE_SERIAL_RECEIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Serial_Send
{
template <class ContainerAllocator>
struct Serial_Receive_
{
  typedef Serial_Receive_<ContainerAllocator> Type;

  Serial_Receive_()
    : vx(0.0)
    , vy(0.0)
    , wz(0.0)  {
    }
  Serial_Receive_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , wz(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _wz_type;
  _wz_type wz;





  typedef boost::shared_ptr< ::Serial_Send::Serial_Receive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Serial_Send::Serial_Receive_<ContainerAllocator> const> ConstPtr;

}; // struct Serial_Receive_

typedef ::Serial_Send::Serial_Receive_<std::allocator<void> > Serial_Receive;

typedef boost::shared_ptr< ::Serial_Send::Serial_Receive > Serial_ReceivePtr;
typedef boost::shared_ptr< ::Serial_Send::Serial_Receive const> Serial_ReceiveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Serial_Send::Serial_Receive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Serial_Send::Serial_Receive_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Serial_Send::Serial_Receive_<ContainerAllocator1> & lhs, const ::Serial_Send::Serial_Receive_<ContainerAllocator2> & rhs)
{
  return lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.wz == rhs.wz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Serial_Send::Serial_Receive_<ContainerAllocator1> & lhs, const ::Serial_Send::Serial_Receive_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Serial_Send

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Serial_Send::Serial_Receive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Serial_Send::Serial_Receive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Serial_Send::Serial_Receive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2020d2d07e276a9930049ea7b96eb7a";
  }

  static const char* value(const ::Serial_Send::Serial_Receive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2020d2d07e276a9ULL;
  static const uint64_t static_value2 = 0x930049ea7b96eb7aULL;
};

template<class ContainerAllocator>
struct DataType< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Serial_Send/Serial_Receive";
  }

  static const char* value(const ::Serial_Send::Serial_Receive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx\n"
"float32 vy\n"
"float32 wz\n"
;
  }

  static const char* value(const ::Serial_Send::Serial_Receive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.wz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Serial_Receive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Serial_Send::Serial_Receive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Serial_Send::Serial_Receive_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "wz: ";
    Printer<float>::stream(s, indent + "  ", v.wz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_SEND_MESSAGE_SERIAL_RECEIVE_H
