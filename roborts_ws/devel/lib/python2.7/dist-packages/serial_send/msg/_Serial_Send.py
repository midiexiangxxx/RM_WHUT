# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_send/Serial_Send.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Serial_Send(genpy.Message):
  _md5sum = "73de9545dab8a1f88fa0fdc921aa3bba"
  _type = "serial_send/Serial_Send"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 vx_set
float32 vy_set
float32 wz_set
float32 yaw_add
float32 pitch_add
uint8 mode"""
  __slots__ = ['vx_set','vy_set','wz_set','yaw_add','pitch_add','mode']
  _slot_types = ['float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vx_set,vy_set,wz_set,yaw_add,pitch_add,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Serial_Send, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vx_set is None:
        self.vx_set = 0.
      if self.vy_set is None:
        self.vy_set = 0.
      if self.wz_set is None:
        self.wz_set = 0.
      if self.yaw_add is None:
        self.yaw_add = 0.
      if self.pitch_add is None:
        self.pitch_add = 0.
      if self.mode is None:
        self.mode = 0
    else:
      self.vx_set = 0.
      self.vy_set = 0.
      self.wz_set = 0.
      self.yaw_add = 0.
      self.pitch_add = 0.
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5fB().pack(_x.vx_set, _x.vy_set, _x.wz_set, _x.yaw_add, _x.pitch_add, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.vx_set, _x.vy_set, _x.wz_set, _x.yaw_add, _x.pitch_add, _x.mode,) = _get_struct_5fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5fB().pack(_x.vx_set, _x.vy_set, _x.wz_set, _x.yaw_add, _x.pitch_add, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.vx_set, _x.vy_set, _x.wz_set, _x.yaw_add, _x.pitch_add, _x.mode,) = _get_struct_5fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5fB = None
def _get_struct_5fB():
    global _struct_5fB
    if _struct_5fB is None:
        _struct_5fB = struct.Struct("<5fB")
    return _struct_5fB
